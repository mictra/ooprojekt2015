/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.chl.calendarplusplus.view;

import edu.chl.calendarplusplus.model.CalendarPlus;
import edu.chl.calendarplusplus.model.IActivity;
import java.awt.Color;
import java.awt.Dimension;
import java.beans.PropertyChangeSupport;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author cain
 */
public class WeekViewCard extends javax.swing.JPanel {

    private final CalendarPlus cal;
    private final Calendar c;
    private boolean buttonPressed;
    private final List<JPanel> daylist;
    private final int daywidth = 132, dayheight = 50;
    private PropertyChangeSupport pcs;
    
    /**
     * Creates new form WeekViewCard
     */
    WeekViewCard(CalendarPlus cal) {
        initComponents();
        this.cal = cal;
        daylist = getDayList();
        c = Calendar.getInstance();
        setWeekLabel(c);
        //weekLabel.setText("Week " + c.get(c.WEEK_OF_YEAR) + ", " + c.get(c.YEAR));
        updateDaysStatic(c);
        setHours();
        setDays(c);
        scrollPane.getVerticalScrollBar().setUnitIncrement(20);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        staticPanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        dayContainer = new javax.swing.JPanel();
        timePanel = new javax.swing.JPanel();
        mondayPanel = new javax.swing.JPanel();
        tuesdayPanel = new javax.swing.JPanel();
        wednesdayPanel = new javax.swing.JPanel();
        thursdayPanel = new javax.swing.JPanel();
        fridayPanel = new javax.swing.JPanel();
        saturdayPanel = new javax.swing.JPanel();
        sundayPanel = new javax.swing.JPanel();
        topPanel = new javax.swing.JPanel();
        previousWeekButton = new javax.swing.JLabel();
        weekLabel = new javax.swing.JLabel();
        nextWeekButton = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1008, 640));

        staticPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 0, 0));

        scrollPane.setBorder(null);
        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        dayContainer.setBorder(null);
        dayContainer.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        timePanel.setBorder(null);
        timePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        dayContainer.add(timePanel);

        mondayPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        dayContainer.add(mondayPanel);

        tuesdayPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        dayContainer.add(tuesdayPanel);

        wednesdayPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        dayContainer.add(wednesdayPanel);

        thursdayPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        dayContainer.add(thursdayPanel);

        fridayPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        dayContainer.add(fridayPanel);

        saturdayPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        dayContainer.add(saturdayPanel);

        sundayPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        dayContainer.add(sundayPanel);

        scrollPane.setViewportView(dayContainer);

        topPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        previousWeekButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrowsLeft.png"))); // NOI18N
        previousWeekButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelMouseReleased(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                previousWeekButtonExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                previousWeekButtonEntered(evt);
            }
        });
        topPanel.add(previousWeekButton);

        weekLabel.setFont(new java.awt.Font("Source Sans Pro", 1, 24)); // NOI18N
        weekLabel.setText("Week #");
        topPanel.add(weekLabel);

        nextWeekButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrowsRight.png"))); // NOI18N
        nextWeekButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelMouseReleased(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                nextWeekButtonExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                nextWeekButtonEntered(evt);
            }
        });
        topPanel.add(nextWeekButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane)
            .addComponent(staticPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(staticPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nextWeekButtonEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextWeekButtonEntered
        nextWeekButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrowsRightHover.png")));
    }//GEN-LAST:event_nextWeekButtonEntered

    private void nextWeekButtonExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextWeekButtonExited
        nextWeekButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrowsRight.png")));
        buttonPressed = false;
    }//GEN-LAST:event_nextWeekButtonExited

    private void labelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMousePressed
        buttonPressed = true;
    }//GEN-LAST:event_labelMousePressed

    private void labelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMouseReleased
        if (buttonPressed) {
            if (evt.getSource() == nextWeekButton) {
                c.add(c.WEEK_OF_YEAR, 1);
                setWeekLabel(c);
                //weekLabel.setText("Week " + c.get(c.WEEK_OF_YEAR) + ", " + c.get(c.YEAR));
                updateDaysStatic(c);
                setDays(c);
            }
            if (evt.getSource() == previousWeekButton) {
                c.add(c.WEEK_OF_YEAR, -1);
                setWeekLabel(c);
                //weekLabel.setText("Week " + c.get(c.WEEK_OF_YEAR) + ", " + c.get(c.YEAR));
                updateDaysStatic(c);
                setDays(c);
            }
        }
    }//GEN-LAST:event_labelMouseReleased

    private void previousWeekButtonEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previousWeekButtonEntered
        previousWeekButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrowsLeftHover.png")));
    }//GEN-LAST:event_previousWeekButtonEntered

    private void previousWeekButtonExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previousWeekButtonExited
        previousWeekButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrowsLeft.png")));
        buttonPressed = false;
    }//GEN-LAST:event_previousWeekButtonExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dayContainer;
    private javax.swing.JPanel fridayPanel;
    private javax.swing.JPanel mondayPanel;
    private javax.swing.JLabel nextWeekButton;
    private javax.swing.JLabel previousWeekButton;
    private javax.swing.JPanel saturdayPanel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JPanel staticPanel;
    private javax.swing.JPanel sundayPanel;
    private javax.swing.JPanel thursdayPanel;
    private javax.swing.JPanel timePanel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JPanel tuesdayPanel;
    private javax.swing.JPanel wednesdayPanel;
    private javax.swing.JLabel weekLabel;
    // End of variables declaration//GEN-END:variables

    void updateWeekView() {
        updateDaysStatic(c);
        setDays(c);
    }

    private void updateDaysStatic(Calendar c) {
        staticPanel.removeAll();
        JLabel emptyLabel = new JLabel("");
        emptyLabel.setPreferredSize(new Dimension(70,18));
        staticPanel.add(emptyLabel);
        for (int i = 0; i < 7; i++) {
            c.set(c.DAY_OF_WEEK, 2 + i);
            WeekViewDayStatic wvds = new WeekViewDayStatic(c);
            wvds.setPreferredSize(new Dimension(daywidth,18));
            //System.out.println(c.getDisplayName(c.DAY_OF_WEEK, c.SHORT, Locale.ENGLISH) + " " + c.get(c.DAY_OF_MONTH));
            staticPanel.add(wvds);
            revalidate();
            repaint();
            revalidate();
        }
//        c.set(c.DAY_OF_WEEK, 2);
//        monthLabel.setText(c.getDisplayName(c.MONTH, c.LONG, Locale.ENGLISH));
//        c.set(c.DAY_OF_WEEK,8);
//        if (!c.getDisplayName(c.MONTH, c.LONG, Locale.ENGLISH).equals(monthLabel.getText())) {
//            monthLabel.setText(monthLabel.getText() + "/" + c.getDisplayName(c.MONTH, c.LONG, Locale.ENGLISH));
//        }
    }

    private void setHours() {
        timePanel.setPreferredSize(new Dimension(60,24*(dayheight)));
        timePanel.setSize(new Dimension(60,24*(dayheight)));
        timePanel.removeAll();
        String hour = "";
        for (int i = 0; i < 24; i++) {
            hour = (i < 10 ? "0" + Integer.toString(i) : Integer.toString(i)) + ":00";
            WeekViewTimeElement wvte = new WeekViewTimeElement(hour);
            wvte.setPreferredSize(new Dimension(60,dayheight));
            timePanel.add(wvte);
            revalidate();
            repaint();
            revalidate();
        }
    }

    private void setDays(Calendar c) {
        c.set(c.DAY_OF_WEEK, 2);
        for (JPanel panel: daylist) {
            panel.setPreferredSize(new Dimension(daywidth,24*(dayheight)));
            panel.removeAll();
            
            c.set(c.HOUR_OF_DAY, 0);    
            c.set(c.MINUTE, 0);
            c.set(c.SECOND, 0);
            c.set(c.MILLISECOND, 0);
            for (int i = 0; i < 24; i++) {
                WeekViewDayElement wvde = new WeekViewDayElement(cal, c);
                wvde.setPreferredSize(new Dimension(daywidth, dayheight));
                wvde.addListener(pcs);              
                panel.add(wvde);               
                revalidate();
                repaint();
                revalidate();
                if (c.get(c.HOUR_OF_DAY) < 23)
                    c.add(c.HOUR_OF_DAY, 1);
            }
            c.set(c.DAY_OF_WEEK, (c.get(c.DAY_OF_WEEK)+1) % 7 );
            
        }


    }

    private List<JPanel> getDayList() {
        List <JPanel> list = new ArrayList<>();
        list.add(mondayPanel);
        list.add(tuesdayPanel);
        list.add(wednesdayPanel);
        list.add(thursdayPanel);
        list.add(fridayPanel);
        list.add(saturdayPanel);
        list.add(sundayPanel);
        return list;
    }
    
    public void addListener(PropertyChangeSupport pcs) {
        this.pcs = pcs;
    }

    private void setWeekLabel(Calendar c) {
        Calendar cal = Calendar.getInstance();
        cal.setTimeInMillis(c.getTimeInMillis());
        cal.set(cal.DAY_OF_WEEK, 2);
        String m = cal.getDisplayName(cal.MONTH, cal.LONG, Locale.ENGLISH);
        cal.set(cal.DAY_OF_WEEK,8);
        if (!cal.getDisplayName(cal.MONTH, cal.LONG, Locale.ENGLISH).equals(m)) {
            m = m + "/" + cal.getDisplayName(cal.MONTH, cal.LONG, Locale.ENGLISH);
        }
        weekLabel.setText("Week " + cal.get(cal.WEEK_OF_YEAR) + ", " + m + " " + cal.get(cal.YEAR));
    }

    void updateWeekViewFromMonth(int week) {
        c.set(c.WEEK_OF_YEAR, week);
        updateDaysStatic(c);
        setDays(c);
    }
    
}
